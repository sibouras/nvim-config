{
  "console.log": {
    "prefix": "cl",
    "body": "console.log(${0})"
  },
  "console.table": {
    "prefix": "ct",
    "body": "console.table(${0})"
  },
  "console.error": {
    "prefix": "ce",
    "body": "console.error(${0})"
  },
  "console.warn": {
    "prefix": "cw",
    "body": "console.warn(${0})"
  },
  "console.log a variable": {
    "prefix": "cv",
    "body": "console.log('${1}:', ${1})"
  },
  "console.dir": {
    "prefix": "cd",
    "body": "console.dir('${1}:', ${1})"
  },
  "JSON.stringify()": {
    "prefix": "jsons",
    "body": "JSON.stringify($0)"
  },
  "JSON.parse()": {
    "prefix": "jsonp",
    "body": "JSON.parse($0)"
  },
  "forEach loop": {
    "prefix": "fe",
    "body": "${1:iterable}.forEach((${2:item}) => {\n\t${0}\n})"
  },
  "map": {
    "prefix": "map",
    "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": "reduce",
    "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
  },
  "filter": {
    "prefix": "filter",
    "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
  },
  "find": {
    "prefix": "find",
    "body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
  },
  "every": {
    "prefix": "every",
    "body": "${1:iterable}.every((${2:item}) => {\n\t${0}\n})"
  },
  "some": {
    "prefix": "some",
    "body": "${1:iterable}.some((${2:item}) => {\n\t${0}\n})"
  },
  "import module": {
    "prefix": "im",
    "body": "import ${2:*} from '${1:module}'"
  },
  "short arrow function": {
    "prefix": "saf",
    "body": "(${1:arguments}) => ${2:statement}"
  },
  "arrow function with body": {
    "prefix": "af",
    "body": "(${1}) => {\n\t${0}\n}"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:i} = 0; ${1:i} < ${2:arr}.length; ${1:i}++) {",
      "\t$0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "\tif (${2:object}.hasOwnProperty(${1:key})) {",
      "\t\tconst ${3:element} = ${2:object}[${1:key}];",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": [
      "for (const ${1:element} of ${2:object}) {",
      "\t$TM_SELECTED_TEXT$0",
      "}"
    ],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "func",
    "body": ["function ${1:name}(${2}) {", "\t$0", "}"],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": ["if (${1:condition}) {", "\t$2", "} else {", "\t$0", "}"],
    "description": "If-Else Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
      "\tcase ${2:value}:",
      "\t\t$0",
      "\t\tbreak;",
      "",
      "\tdefault:",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": ["while (${1:condition}) {", "\t$0", "}"],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": ["do {", "\t$0", "} while (${1:condition});"],
    "description": "Do-While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "trycatch",
    "body": ["try {", "\t$0", "} catch (${1:error}) {", "\t", "}"],
    "description": "Try-Catch Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout});"],
    "description": "Set Timeout Function"
  },
  "Set Interval Function": {
    "prefix": "setinterval",
    "body": ["setInterval(() => {", "\t$0", "}, ${1:interval});"],
    "description": "Set Interval Function"
  }
}
